name: Container Image Build

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
  - cron: '9 2 * * *' # 02:09 yyds
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  # github ctx https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/contexts#github-context
  IMAGE_NAME: ${{ github.repository_owner }}/toolkit

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    
    - name: setup nushell
      uses: hustcer/setup-nu@v3
      with:
        check-latest: true
    - name: fetch latest toolkit versions
      shell: nu {0}
      id: latest-versions
      run: |
        use ${{ github.workspace }}/nushell/scripts *

        [
            [google/go-containerregistry CRANE_VERSION]
            [kubernetes-sigs/cri-tools CIRCTL_VERSION]
            [nushell/nushell NUSHELL_VERSION]
            [carapace-sh/carapace-bin CARAPACE_VERSION]
            [starship/starship STARSHIP_VERSION]
        ] | each {|it|
            github latest-version $it.0 | $"($it.1)=($in)"
        } | str join "\n"
          | github multi-line-output LATEST_VERSIONS $in

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Containerfile
        provenance: false
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ secrets.DOCKER_USERNAME }}/toolkit:latest
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ steps.latest-versions.outputs.LATEST_VERSIONS }}